name: automatically reset chatbot tokens

on:
  workflow_run:
    workflows: ["pages build and deployment"]
    types:
      - completed

jobs:
  reset_key:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Get repository files (equivalent to git pull)
        uses: actions/checkout@v2
        
      - name: Reset the key automatically
        uses: actions/github-script@v4
        env:
          OPENAI_API_KEY_ASSISTANT: '${{ secrets.OPENAI_API_KEY_ASSISTANT }}'
          ASSISTANT_ID: '${{ secrets.ASSISTANT_ID }}'
          THREAD_ID: '${{ secrets.THREAD_ID }}'
        with:
          github-token: ${{ secrets.REPOA_MY_CHATBOT }}
          script: |
            // --------------------------------
            var n = 1;

            // Resalt and save the key in .env, for the next time
            var alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; 
            var num = '0123456789'; 
            let alpha_arr = alpha.split(''); 
            let num_arr = num.split('');

            // --------------------------------
            
            // Determine the salt length - it can be up to length n
            // Configuration 0: [1 to n]
            // first part is [0 to n-1], we do not want 0 so shift it by one [1 to n]
            // var new_salt_length = Math.round(Math.random())*(n-1) + 1;
            // OR
            // Configuration 1: [no_salt to n]
            var new_salt_length = Math.round(Math.random())*n;
            console.log('new_salt_length: ', new_salt_length);
            
            // --------------------------------
            
            if (new_salt_length > 0) {
              // Fill a vector new_salt_length long with 0 or 1; 0=salt a letter, 1=salt a number
              var letnum_selection = [];
              for (let i=0; i<new_salt_length; i++) {
                letnum_selection.push(Math.round(Math.random())); 
              }
              // console.log('letnum_selection: ', letnum_selection);
              
              // --------------------------------

              // Create salt (extra strings randomly)
              var salt = letnum_selection.map((row) => { 
                if (row == 0) { 
                  let val = Math.round(Math.random()*alpha_arr.length);
                  // console.log('val: ', val);
                  return alpha_arr[val]; 
                } else { 
                  let val = Math.round(Math.random()*num_arr.length);
                  // console.log('val: ', val);
                  return num_arr[val]; 
                } 
              });
              // console.log('salt: ', salt);
              salt = salt.join('');
            } else {
              salt = "";
            }
            console.log('salt: ', salt);
            
            // --------------------------------
            async function salt(new_auth) {
              // Add salt to auth_new
              if (Math.round(Math.random()) == 0) {
                // salt front
                new_auth = salt+new_auth;
              } else {
                // salt back
                new_auth = new_auth+salt;
              }
              
              return new_auth;
            }
            // --------------------------------
            async function scramble(new_auth) {
              // Scramble key : Github automatically base64 decodes and searches the strings and can find the key, causing GitHub to disactivate the key automatically for security
              
              // obtain even values of string
              new_auth_arr = new_auth.split('');
              // console.log('new_auth_arr: ', new_auth_arr);
  
              ep = [];
              ap = [];
              for (let i=0; i<new_auth_arr.length; i++) {
                if (i % 2 == 0) { 
                  ep.push(new_auth_arr[i]);
                } else {
                  ap.push(new_auth_arr[i]);
                }
              }
              // console.log('ep: ', ep);
              // console.log('ap: ', ap);
  
              let new_auth1 = ep.join('') + "|" + ap.join('');
              // console.log('new_auth1: ', new_auth1);
              
              return btoa(new_auth1); // This will be displayed in the file
            }
            // --------------------------------

            const { OPENAI_API_KEY_ASSISTANT } = process.env;
            OPENAI_API_KEY_ASSISTANT = await salt(OPENAI_API_KEY_ASSISTANT);
            OPENAI_API_KEY_ASSISTANT = await scramble(OPENAI_API_KEY_ASSISTANT);
            
            // --------------------------------

            const { ASSISTANT_ID } = process.env;
            ASSISTANT_ID = await salt(ASSISTANT_ID);
            ASSISTANT_ID = await scramble(ASSISTANT_ID);

            // --------------------------------

            const { THREAD_ID } = process.env;
            THREAD_ID = await salt(THREAD_ID);
            THREAD_ID = await scramble(THREAD_ID);
            
            // --------------------------------

            let new_auth = `${OPENAI_API_KEY_ASSISTANT}|${ASSISTANT_ID}|${THREAD_ID}`;
            // console.log('new_auth: ', new_auth);

            // --------------------------------
            
            const fs = require('fs');
            fs.writeFileSync('.github/.chatbot_tokens', new_auth);


      - name: Commit and push changes back to repository
        run:  git config --global user.email "j622amilah@gmail.com"; git config --global user.name "CodeSolutions2"; git config --global push.autoSetupRemote true; git pull origin main; git checkout main; git branch --set-upstream-to origin/main; git merge main --ff-only; git add -A; git diff-index --quiet HEAD || git commit -m "add files" --allow-empty; git push https://${{ secrets.REPOA_MY_CHATBOT }}@github.com/CodeSolutions2/frontend_backend_message_passing_central_repository_v0.git
