name: automatically reset chatbot tokens

on:
  schedule:
    - cron: '0 3,7,11,15,19,23 * * *'

jobs:
  reset_key:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Get repository files (equivalent to git pull)
        uses: actions/checkout@v2
        
      - name: Reset the key automatically
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY_ASSISTANT: '${{ secrets.OPENAI_API_KEY_ASSISTANT }}'
          ASSISTANT_ID: '${{ secrets.ASSISTANT_ID }}'
          THREAD_ID: '${{ secrets.THREAD_ID }}'
        with:
          result-encoding: string
          script: |
            // --------------------------------
            var n = 0;

            // Resalt and save the key in .env, for the next time
            const alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; 
            const num = '0123456789'; 
            var alpha_arr = alpha.split(''); 
            var num_arr = num.split('');

            // --------------------------------
            
            // Determine the salt length - it can be up to length n
            // Configuration 0: [1 to n]
            // first part is [0 to n-1], we do not want 0 so shift it by one [1 to n]
            // var new_salt_length = Math.round(Math.random())*(n-1) + 1;
            // OR
            // Configuration 1: [no_salt to n]
            var new_salt_length = Math.round(Math.random())*n;
            console.log('new_salt_length: ', new_salt_length);
            
            // --------------------------------
            
            if (new_salt_length > 0) {
              // Fill a vector new_salt_length long with 0 or 1; 0=salt a letter, 1=salt a number
              var letnum_selection = [];
              for (let i=0; i<new_salt_length; i++) {
                letnum_selection.push(Math.round(Math.random())); 
              }
              // console.log('letnum_selection: ', letnum_selection);
              
              // --------------------------------

              // Create salt (extra strings randomly)
              var salt = letnum_selection.map((row) => { 
                if (row == 0) { 
                  var val = Math.round(Math.random()*alpha_arr.length);
                  // console.log('val: ', val);
                  return alpha_arr[val]; 
                } else { 
                  var val = Math.round(Math.random()*num_arr.length);
                  // console.log('val: ', val);
                  return num_arr[val]; 
                } 
              });
              // console.log('salt: ', salt);
              salt = salt.join('');
            } else {
              salt = "";
            }
            console.log('salt: ', salt);
            
            // --------------------------------
            
            var OPENAI_API_KEY_ASSISTANT = process.env.OPENAI_API_KEY_ASSISTANT;
            
            // Add salt to auth_new
            if (Math.round(Math.random()) == 0) {
              // salt front
              OPENAI_API_KEY_ASSISTANT = salt+OPENAI_API_KEY_ASSISTANT;
            } else {
              // salt back
              OPENAI_API_KEY_ASSISTANT = OPENAI_API_KEY_ASSISTANT+salt;
            }

            // Scramble key : Github automatically base64 decodes and searches the strings and can find the key, causing GitHub to disactivate the key automatically for security
            
            // obtain even values of string
            var new_auth_arr = OPENAI_API_KEY_ASSISTANT.split('');
            // console.log('new_auth_arr: ', new_auth_arr);

            var ep = [];
            var ap = [];
            for (let i=0; i<new_auth_arr.length; i++) {
              if (i % 2 == 0) { 
                ep.push(new_auth_arr[i]);
              } else {
                ap.push(new_auth_arr[i]);
              }
            }
            // console.log('ep: ', ep);
            // console.log('ap: ', ap);

            var new_auth1 = ep.join('') + "|" + ap.join('');
            // console.log('new_auth1: ', new_auth1);

            // This will be displayed in the file
            OPENAI_API_KEY_ASSISTANT = btoa(new_auth1);
            
            // --------------------------------
            
            var ASSISTANT_ID = process.env.ASSISTANT_ID;

            // Add salt to auth_new
            if (Math.round(Math.random()) == 0) {
              // salt front
              ASSISTANT_ID = salt+ASSISTANT_ID;
            } else {
              // salt back
              ASSISTANT_ID = ASSISTANT_ID+salt;
            }

            // Scramble key : Github automatically base64 decodes and searches the strings and can find the key, causing GitHub to disactivate the key automatically for security
            
            // obtain even values of string
            var new_auth_arr = ASSISTANT_ID.split('');
            // console.log('new_auth_arr: ', new_auth_arr);

            var ep = [];
            var ap = [];
            for (let i=0; i<new_auth_arr.length; i++) {
              if (i % 2 == 0) { 
                ep.push(new_auth_arr[i]);
              } else {
                ap.push(new_auth_arr[i]);
              }
            }
            // console.log('ep: ', ep);
            // console.log('ap: ', ap);

            var new_auth1 = ep.join('') + "|" + ap.join('');
            // console.log('new_auth1: ', new_auth1);

            // This will be displayed in the file
            ASSISTANT_ID = btoa(new_auth1); 

            // --------------------------------
            
            var THREAD_ID = process.env.THREAD_ID;

            // Add salt to auth_new
            if (Math.round(Math.random()) == 0) {
              // salt front
              THREAD_ID = salt+THREAD_ID;
            } else {
              // salt back
              THREAD_ID = THREAD_ID+salt;
            }

            // Scramble key : Github automatically base64 decodes and searches the strings and can find the key, causing GitHub to disactivate the key automatically for security
            
            // obtain even values of string
            var new_auth_arr = THREAD_ID.split('');
            // console.log('new_auth_arr: ', new_auth_arr);

            var ep = [];
            var ap = [];
            for (let i=0; i<new_auth_arr.length; i++) {
              if (i % 2 == 0) { 
                ep.push(new_auth_arr[i]);
              } else {
                ap.push(new_auth_arr[i]);
              }
            }
            // console.log('ep: ', ep);
            // console.log('ap: ', ap);

            var new_auth1 = ep.join('') + "|" + ap.join('');
            // console.log('new_auth1: ', new_auth1);

            // This will be displayed in the file
            THREAD_ID = btoa(new_auth1);
            
            // --------------------------------

            var new_auth = `${OPENAI_API_KEY_ASSISTANT}|${ASSISTANT_ID}|${THREAD_ID}`;
            // console.log('new_auth: ', new_auth);

            // --------------------------------
            
            const fs = require('fs');
            fs.writeFileSync('.github/.chatbot_tokens', new_auth);


      - name: Commit and push changes back to repository
        run: |
          repoOwner="CodeSolutions2";
          repoName="my_chatbot";
          repoOwnerEmail="j622amilah@gmail.com";
          REPOA_MY_CHATBOT="${{ secrets.REPOA_MY_CHATBOT_TOKEN0 || secrets.REPOA_MY_CHATBOT_TOKEN1 }}";
          
          git config --global user.email ${repoOwnerEmail};
          git config --global user.name ${repoOwner};
          git config --global push.autoSetupRemote true;
          git pull origin main;
          git checkout main;
          git branch --set-upstream-to origin/main;
          git merge main --ff-only;
          git add -A;
          git diff-index --quiet HEAD || git commit -m "add files" --allow-empty;
          git push https:/${REPOA_MY_CHATBOT}@github.com/${repoOwner}/${repoName}.git
