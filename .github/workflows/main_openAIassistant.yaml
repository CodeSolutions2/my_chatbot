name: openAIassistant Process Frontend data on the Backend

on:
  repository_dispatch:
    types: [trigger-openAIassistant]

jobs:
  call_endpoint_after_trigger:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      
    steps:
      - name: Get repository files (equivalent to git pull)
        uses: actions/checkout@v2

      - name: Create a THREAD
        run: INPUT_TEXT=$(echo "Read the content of a file respond to the following request:${{ github.event.client_payload.fromrepob }}. Format the output concisely with only the response, use the least number of words."); echo "INPUT_TEXT = $INPUT_TEXT"; json_string_create_a_thread_var="$(echo '{"messages":[{"role":"user", "content":"'$INPUT_TEXT'", "attachments":[{"file_id":"'${{ secrets.FILE_ID }}'", "tools":[{"type":"code_interpreter"}]}]}]}' | jq -c)"; echo "json_string_create_a_thread_var = $json_string_create_a_thread_var"; THREAD_ID=$(curl -X POST https://api.openai.com/v1/threads -H "Content-Type:application/json" -H "Authorization:Bearer ${{ secrets.OPENAI_API_KEY }}" -H "OpenAI-Beta:assistants=v2" -d "$json_string_create_a_thread_var" | jq '.id' | sed 's/"//g'); echo "THREAD_ID = $THREAD_ID";

      - name: Add a message to a THREAD
        run: json_string_add_messages_to_thread_var="$(echo '{"role":"user", "content":"'$INPUT_TEXT'"}' | jq -c)"; echo "json_string_add_messages_to_thread_var = $json_string_add_messages_to_thread_var"; THREAD_MESSAGE_ID=$(curl -X POST https://api.openai.com/v1/threads/${THREAD_ID}/messages -H "Content-Type:application/json" -H "Authorization:Bearer ${{ secrets.OPENAI_API_KEY }}" -H "OpenAI-Beta:assistants=v2" -d "$json_string_add_messages_to_thread_var" | jq '.id' | sed 's/"//g'); echo "THREAD_MESSAGE_ID = $THREAD_MESSAGE_ID"; 

      - name: Create RUN_ID payload
        run: json_string_create_run_var="$(echo '{"assistant_id":"'${{ secrets.ASSISTANT_ID }}'"}' | jq -c)"; echo "json_string_create_run_var = $json_string_create_run_var"; RUN_ID=$(curl -X POST https://api.openai.com/v1/threads/${THREAD_ID}/runs -H "Content-Type:application/json" -H "Authorization:Bearer ${{ secrets.OPENAI_API_KEY }}" -H "OpenAI-Beta:assistants=v2" -d "$json_string_create_run_var" | jq '.id' | sed 's/"//g'); echo "RUN_ID = $RUN_ID";

      - name: Initialize while loop to determine if done
        run: c=0; max_allowed_loops=30; run_status=$(curl -X GET https://api.openai.com/v1/threads/${THREAD_ID}/runs/$RUN_ID -H "Authorization:Bearer ${{ secrets.OPENAI_API_KEY }}" -H "OpenAI-Beta:assistants=v2" | jq '.status' | sed 's/"//g'); sleep 50; 

      - name: While loop to determine if done
        run: while [[ $run_status != "completed" ]] && [[ $c < $max_allowed_loops ]]; do
            run_status=$(curl -X GET https://api.openai.com/v1/threads/${THREAD_ID}/runs/$RUN_ID -H "Authorization:Bearer ${{ secrets.OPENAI_API_KEY }}" -H "OpenAI-Beta:assistants=v2" | jq '.status' | sed 's/"//g'); 
            echo "c = $c"; 
            sleep 50; 
            c = c + 1; 
          done;

      - name: Obtain model response
        run: model_response=$(curl -X GET https://api.openai.com/v1/threads/${THREAD_ID}/messages -H "Authorization:Bearer ${{ secrets.OPENAI_API_KEY }}" -H "Content-Type:application/json" -H "OpenAI-Beta:assistants=v2" | jq '.data[0].content[0].text.value' | sed 's/"//g'); echo "$model_response" >> openAIassistant_response;
        
      - name: Commit and push changes
        run: git config --global user.email "j622amilah@gmail.com"; git config --global user.name "CodeSolutions2"; git config --global pull.rebase true; git add .; git commit -m "add files"; git push https://${{ secrets.REPOA_MY_CHATBOT }}@github.com/CodeSolutions2/my_chatbot.git
